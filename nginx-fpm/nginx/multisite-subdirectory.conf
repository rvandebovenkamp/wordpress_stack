#
# To enable this configuration; rename the file to 'site.conf' and restart the container
# mv multisite-subdirectory.conf site.conf

upstream php {
        server unix:/tmp/php-fpm.sock;
}
map $http_x_forwarded_proto $fcgi_https {
        default off;
        https on;
}

# for multisite
map $http_host $blogid {
    default       -999;

    #Ref: https://wordpress.org/extend/plugins/nginx-helper/
    #include /var/www/wordpress/wp-content/plugins/nginx-helper/map.conf ;

}

map $uri $blogname {
    ~^(?P<blogpath>[^/]+)/files/(.*)       $blogpath ;
}

server {
        server_name _;
        root /var/www/html/wordpress;
        index index.php index.html;

          # Do not remove
        location /healthcheck {
                default_type 'text/plain';
                access_log	off;
                error_log	off;
                return 204;
        }

        set $no_cache 0;


	## WP multisite rules

        location ~ ^(/[^/]+/)?files/(.+) {
                try_files /wp-content/blogs.dir/$blogid/files/$2 /wp-includes/ms-files.php?file=$2 ;
                access_log off;     log_not_found off; expires max;
        }
        
        #avoid php readfile()
        location ^~ /blogs.dir {
                internal;
                alias /var/www/html/wordpress/wp-content/blogs.dir ;
                access_log off;     log_not_found off; expires max;
        }
        
        if (!-e $request_filename) {
                rewrite /wp-admin$ $scheme://$host$request_uri/ permanent;
                rewrite ^(/[^/]+)?(/wp-.*) $2 last;
                rewrite ^(/[^/]+)?(/.*\.php) $2 last;
        }


        # POST requests and urls with a query string should always go to PHP
        if ($request_method = POST) {
                set $no_cache 1;
        }
        if ($query_string != "") {
                set $no_cache 1;
        }

        # Don't cache uris containing the following segments
        if ($request_uri ~* "(/wp-admin/|/xmlrpc.php|/wp-(app|cron|login|register|mail).php|wp-.*.php|/feed/|index.php|wp-comments-popup.php|wp-links-opml.php|wp-locations.php|sitemap(_index)?.xml|[a-z0-9_-]+-sitemap([0-9]+)?.xml)") {
                set $no_cache 1;
        }

        # Don't use the cache for logged in users or recent commenters
        if ($http_cookie ~* "comment_author|wordpress_[a-f0-9]+|wp-postpass|wordpress_no_cache|wordpress_logged_in") {
                set $no_cache 1;
        }

        # Deny all attempts to access hidden files
        location ~ /\. {
                deny all;
        }

        # Deny access to any files with a .php extension in the uploads directory
        location ~* /(?:uploads|files)/.*\.php$ {
                deny all;
        }

        location = /favicon.ico {
                log_not_found off;
                access_log off;
        }

        location = /robots.txt {
                allow all;
                log_not_found off;
                access_log off;
        }

        location = /xmlrpc.php {
                deny all;
        }

        location / {
                try_files $uri $uri/ /index.php?$args;
        }

        location ~ \.php$ {
                include fastcgi.conf;
                #fastcgi_intercept_errors on;
                fastcgi_pass php;
                fastcgi_cache_bypass $no_cache;
                fastcgi_no_cache $no_cache;
                fastcgi_cache WORDPRESS;
                fastcgi_cache_valid 200 60m;
                fastcgi_param HTTP_X_FORWARDED_PROTO $http_x_forwarded_proto if_not_empty;
                fastcgi_param HTTPS $fcgi_https;
        }

        # Speed up static files
        location ~* \.(?:css|cur|js|jpe?g|gif|htc|ico|png|otf|ttf|eot|woff|woff2|svg|webp)$ {
          expires max;
          tcp_nodelay off;
				  add_header Cache-Control public;
					open_file_cache max=1000 inactive=30s;
					open_file_cache_valid 30s;
					open_file_cache_min_uses 2;
					open_file_cache_errors off;
				}
        location ~ /purge(/.*) {
                fastcgi_cache_purge WORDPRESS "$scheme$request_method$host$1";
        }


}
